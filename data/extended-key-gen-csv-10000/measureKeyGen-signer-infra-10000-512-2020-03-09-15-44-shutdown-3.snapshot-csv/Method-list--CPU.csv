"Method","Time (ms)","Own Time (ms)"
"java.lang.Thread.run() Thread.java","10067","15"
"java.math.BigInteger.modPow(BigInteger, BigInteger) BigInteger.java","7340","7340"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.generateBases() ExtendedKeyPair.java","6965","0"
"eu.prismacloud.primitives.zkpgs.util.crypto.QRElement.modPow(BigInteger) QRElement.java","5718","0"
"eu.prismacloud.primitives.zkpgs.util.crypto.QRElement.modPow(BigInteger) QRElement.java","5718","0"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.generateEdgeBases(GroupElement) ExtendedKeyPair.java","5431","83"
"eu.prismacloud.primitives.zkpgs.encoding.GeoLocationGraphEncoding.setupEncoding() GeoLocationGraphEncoding.java","1538","0"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.setupEncoding() ExtendedKeyPair.java","1538","0"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.generateVertexBases(GroupElement) ExtendedKeyPair.java","1534","0"
"eu.prismacloud.primitives.zkpgs.keys.SignerKeyPair.keyGen(KeyGenParameters) SignerKeyPair.java","1523","0"
"eu.prismacloud.primitives.zkpgs.store.URN.createZkpgsURN(String) URN.java","1215","0"
"eu.prismacloud.primitives.zkpgs.encoding.GeoLocationGraphEncoding.generateVertexRepresentatives() GeoLocationGraphEncoding.java","1153","7"
"eu.prismacloud.primitives.zkpgs.store.URNType.buildURN(URNType, Class, int) URNType.java","1027","0"
"eu.prismacloud.primitives.zkpgs.util.CryptoUtilsFacade.computeSpecialRSAModulus(KeyGenParameters) CryptoUtilsFacade.java","975","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateSpecialRSAModulus() GSUtils.java","975","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomSafePrime(KeyGenParameters) GSUtils.java","975","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomPrime(int) GSUtils.java","963","0"
"java.math.BigInteger.probablePrime(int, Random) BigInteger.java","963","963"
"java.math.BigInteger.nextProbablePrime() BigInteger.java","858","858"
"eu.prismacloud.primitives.zkpgs.store.URN.<init>(NamespaceComponent, NamespaceComponent, boolean) URN.java","667","0"
"eu.prismacloud.primitives.zkpgs.store.URNType.parseURNType(String) URNType.java","659","0"
"eu.prismacloud.primitives.zkpgs.store.URNType.parseURNSuffix(String) URNType.java","639","8"
"java.util.regex.Matcher.matches() Matcher.java","571","571"
"java.lang.String.matches(String) String.java","567","567"
"eu.prismacloud.primitives.zkpgs.util.CryptoUtilsFacade.commitmentGroupSetup(KeyGenParameters) CryptoUtilsFacade.java","543","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateCommitmentGroup() GSUtils.java","543","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.computeCommitmentGroupModulus(BigInteger) GSUtils.java","539","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomPrimeWithFactors(BigInteger) GSUtils.java","539","0"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.fromString(String, NamespaceComponent$Type) NamespaceComponent.java","535","0"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.validate(String, NamespaceComponent$Type) NamespaceComponent.java","535","0"
"java.math.BigInteger.isProbablePrime(int) BigInteger.java","523","523"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomNumberWithFactors(BigInteger) GSUtils.java","523","0"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.validateNSS(String) NamespaceComponent.java","435","0"
"eu.prismacloud.primitives.zkpgs.parameters.JsonIsoCountries.getCountryMap() JsonIsoCountries.java","384","0"
"org.openjdk.jmh.runner.ForkedMain.main(String[]) ForkedMain.java","356","356"
"java.lang.ClassLoader.loadClass(String) ClassLoader.java","286","366"
"org.eclipse.yasson.internal.JsonBinding.fromJson(InputStream, Type) JsonBinding.java","273","273"
"java.math.BigInteger.<init>(int, Random) BigInteger.java","212","212"
"eu.prismacloud.primitives.zkpgs.store.URNType.buildURNComponent(URNType, Class, int) URNType.java","119","0"
"java.lang.Class.getDeclaredField(String) Class.java","117","117"
"eu.prismacloud.primitives.zkpgs.util.CryptoUtilsFacade.computeRandomNumber(int) CryptoUtilsFacade.java","116","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.createRandomNumber(int) GSUtils.java","116","0"
"javax.json.bind.JsonbBuilder.create() JsonbBuilder.java","111","111"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.validateNID(String) NamespaceComponent.java","99","8"
"java.util.regex.Pattern.matcher(CharSequence) Pattern.java","80","80"
"java.math.BigInteger.subtract(BigInteger) BigInteger.java","75","75"
"java.lang.Object.clone() Object.java (native)","55","55"
"eu.prismacloud.primitives.zkpgs.store.URNType.values() URNType.java","47","0"
"java.math.BigInteger.add(BigInteger) BigInteger.java","35","35"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.isPrime(BigInteger) GSUtils.java","32","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.createRandomNumber(BigInteger, BigInteger) GSUtils.java","31","0"
"sun.launcher.LauncherHelper.checkAndLoadMain(boolean, int, String) LauncherHelper.java","28","28"
"java.util.HashMap.put(Object, Object) HashMap.java","23","23"
"eu.prismacloud.primitives.zkpgs.parameters.GraphEncodingParameters.<init>(int, int, int, int, int) GraphEncodingParameters.java","23","0"
"eu.prismacloud.primitives.zkpgs.store.URN.parseSuffix(String) URN.java","20","0"
"java.util.StringTokenizer.hasMoreTokens() StringTokenizer.java","20","20"
"java.lang.StringBuilder.append(int) StringBuilder.java","19","11"
"java.lang.StringBuilder.toString() StringBuilder.java","12","12"
"eu.prismacloud.primitives.zkpgs.store.URNType.getSuffix(URNType) URNType.java","11","11"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.<clinit>() NamespaceComponent.java","11","0"
"eu.prismacloud.primitives.zkpgs.util.crypto.QRElement.<init>(Group, BigInteger) QRElement.java","8","8"
"eu.prismacloud.primitives.zkpgs.util.crypto.EEAlgorithm.computeEEAlgorithm(BigInteger, BigInteger) EEAlgorithm.java","4","0"
"eu.prismacloud.primitives.zkpgs.util.crypto.QRGroupPQ.<init>(BigInteger, BigInteger) QRGroupPQ.java","4","0"
"eu.prismacloud.primitives.zkpgs.util.crypto.QRGroupPQ.computeEEA(BigInteger, BigInteger) QRGroupPQ.java","4","0"
"java.math.BigInteger.divide(BigInteger) BigInteger.java","4","4"
