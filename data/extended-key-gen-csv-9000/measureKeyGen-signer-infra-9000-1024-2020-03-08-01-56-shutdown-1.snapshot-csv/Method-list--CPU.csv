"Method","Time (ms)","Own Time (ms)"
"java.lang.Thread.run() Thread.java","36641","0"
"java.math.BigInteger.modPow(BigInteger, BigInteger) BigInteger.java","33741","33741"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.generateBases() ExtendedKeyPair.java","33700","0"
"eu.prismacloud.primitives.zkpgs.util.crypto.QRElement.modPow(BigInteger) QRElement.java","32340","11"
"eu.prismacloud.primitives.zkpgs.util.crypto.QRElement.modPow(BigInteger) QRElement.java","32328","0"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.generateEdgeBases(GroupElement) ExtendedKeyPair.java","26551","32"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.generateVertexBases(GroupElement) ExtendedKeyPair.java","7149","36"
"eu.prismacloud.primitives.zkpgs.encoding.GeoLocationGraphEncoding.setupEncoding() GeoLocationGraphEncoding.java","1473","0"
"eu.prismacloud.primitives.zkpgs.keys.ExtendedKeyPair.setupEncoding() ExtendedKeyPair.java","1473","0"
"eu.prismacloud.primitives.zkpgs.keys.SignerKeyPair.keyGen(KeyGenParameters) SignerKeyPair.java","1443","0"
"eu.prismacloud.primitives.zkpgs.util.CryptoUtilsFacade.computeSpecialRSAModulus(KeyGenParameters) CryptoUtilsFacade.java","1383","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateSpecialRSAModulus() GSUtils.java","1383","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomSafePrime(KeyGenParameters) GSUtils.java","1383","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomPrime(int) GSUtils.java","1339","0"
"java.math.BigInteger.probablePrime(int, Random) BigInteger.java","1339","1339"
"eu.prismacloud.primitives.zkpgs.encoding.GeoLocationGraphEncoding.generateVertexRepresentatives() GeoLocationGraphEncoding.java","1136","67"
"eu.prismacloud.primitives.zkpgs.store.URN.createZkpgsURN(String) URN.java","1079","8"
"eu.prismacloud.primitives.zkpgs.store.URNType.buildURN(URNType, Class, int) URNType.java","1007","0"
"java.math.BigInteger.nextProbablePrime() BigInteger.java","805","805"
"eu.prismacloud.primitives.zkpgs.store.URN.<init>(NamespaceComponent, NamespaceComponent, boolean) URN.java","655","7"
"eu.prismacloud.primitives.zkpgs.store.URNType.parseURNType(String) URNType.java","631","8"
"eu.prismacloud.primitives.zkpgs.store.URNType.parseURNSuffix(String) URNType.java","575","20"
"java.lang.String.matches(String) String.java","515","515"
"java.util.regex.Matcher.matches() Matcher.java","483","483"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.fromString(String, NamespaceComponent$Type) NamespaceComponent.java","415","12"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.validate(String, NamespaceComponent$Type) NamespaceComponent.java","403","0"
"org.openjdk.jmh.runner.ForkedMain.main(String[]) ForkedMain.java","387","387"
"java.lang.ClassLoader.loadClass(String) ClassLoader.java","365","432"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.validateNSS(String) NamespaceComponent.java","363","0"
"eu.prismacloud.primitives.zkpgs.parameters.JsonIsoCountries.getCountryMap() JsonIsoCountries.java","337","0"
"java.math.BigInteger.<init>(int, Random) BigInteger.java","323","323"
"org.eclipse.yasson.internal.JsonBinding.fromJson(InputStream, Type) JsonBinding.java","237","237"
"eu.prismacloud.primitives.zkpgs.util.CryptoUtilsFacade.computeRandomNumber(int) CryptoUtilsFacade.java","231","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.createRandomNumber(int) GSUtils.java","219","0"
"eu.prismacloud.primitives.zkpgs.store.URNType.buildURNComponent(URNType, Class, int) URNType.java","183","0"
"java.lang.Class.getDeclaredField(String) Class.java","175","175"
"javax.json.bind.JsonbBuilder.create() JsonbBuilder.java","99","99"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.isPrime(BigInteger) GSUtils.java","72","0"
"java.math.BigInteger.isProbablePrime(int) BigInteger.java","72","72"
"eu.prismacloud.primitives.zkpgs.util.CryptoUtilsFacade.commitmentGroupSetup(KeyGenParameters) CryptoUtilsFacade.java","59","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateCommitmentGroup() GSUtils.java","59","0"
"eu.prismacloud.primitives.zkpgs.store.URN.parseSuffix(String) URN.java","55","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.computeCommitmentGroupModulus(BigInteger) GSUtils.java","44","0"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomPrimeWithFactors(BigInteger) GSUtils.java","44","0"
"eu.prismacloud.primitives.zkpgs.util.NamespaceComponent.validateNID(String) NamespaceComponent.java","39","0"
"java.util.HashMap.put(Object, Object) HashMap.java","35","35"
"java.util.StringTokenizer.nextToken() StringTokenizer.java","35","35"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.generateRandomNumberWithFactors(BigInteger) GSUtils.java","32","0"
"java.util.regex.Pattern.matcher(CharSequence) Pattern.java","31","31"
"sun.launcher.LauncherHelper.checkAndLoadMain(boolean, int, String) LauncherHelper.java","30","30"
"java.lang.Object.getClass() Object.java (native)","27","27"
"java.lang.Object.clone() Object.java (native)","23","23"
"eu.prismacloud.primitives.zkpgs.util.GSUtils.createRandomNumber(BigInteger, BigInteger) GSUtils.java","20","0"
"java.util.StringTokenizer.hasMoreTokens() StringTokenizer.java","19","11"
"eu.prismacloud.primitives.zkpgs.parameters.GraphEncodingParameters.<init>(int, int, int, int, int) GraphEncodingParameters.java","15","0"
"eu.prismacloud.primitives.zkpgs.store.URNType.getSuffix(URNType) URNType.java","15","15"
"eu.prismacloud.primitives.zkpgs.util.Assert.notEmpty(String, String) Assert.java","12","0"
"java.lang.String.isEmpty() String.java","12","0"
"java.lang.StringBuilder.append(String) StringBuilder.java","12","12"
"eu.prismacloud.primitives.zkpgs.util.CryptoUtilsFactory.getInstance(String) CryptoUtilsFactory.java","11","11"
"java.lang.Integer.valueOf(int) Integer.java","11","11"
"java.lang.reflect.Field.get(Object) Field.java","11","11"
"eu.prismacloud.primitives.zkpgs.store.URNType.values() URNType.java","11","0"
"eu.prismacloud.primitives.zkpgs.parameters.KeyGenParameters.<init>(int, int, int, int, int, int, int, int, int, int, int, int) KeyGenParameters.java","7","0"
"eu.prismacloud.primitives.zkpgs.parameters.KeyGenParameters.createKeyGenParameters(int, int, int, int, int, int, int, int, int, int, int, int) KeyGenParameters.java","7","0"
"java.lang.StringBuilder.toString() StringBuilder.java","3","3"
